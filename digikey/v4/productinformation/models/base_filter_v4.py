
"""
ProductSearch Api

ProductSearch Api  # noqa: E501

OpenAPI spec version: v4
Contact: dl_Agile_Team_B2B_API@digikey.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class BaseFilterV4:
    """
    NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"id": "int", "value": "str", "product_count": "int"}

    attribute_map = {"id": "Id", "value": "Value", "product_count": "ProductCount"}

    def __init__(self, id=None, value=None, product_count=None) -> None:
        """BaseFilterV4 - a model defined in Swagger"""
        self._id = None
        self._value = None
        self._product_count = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if value is not None:
            self.value = value
        if product_count is not None:
            self.product_count = product_count

    @property
    def id(self):
        """
        Gets the id of this BaseFilterV4.  # noqa: E501

        :return: The id of this BaseFilterV4.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id) -> None:
        """
        Sets the id of this BaseFilterV4.

        :param id: The id of this BaseFilterV4.  # noqa: E501
        :type: int
        """
        self._id = id

    @property
    def value(self):
        """
        Gets the value of this BaseFilterV4.  # noqa: E501

        :return: The value of this BaseFilterV4.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value) -> None:
        """
        Sets the value of this BaseFilterV4.

        :param value: The value of this BaseFilterV4.  # noqa: E501
        :type: str
        """
        self._value = value

    @property
    def product_count(self):
        """
        Gets the product_count of this BaseFilterV4.  # noqa: E501

        :return: The product_count of this BaseFilterV4.  # noqa: E501
        :rtype: int
        """
        return self._product_count

    @product_count.setter
    def product_count(self, product_count) -> None:
        """
        Sets the product_count of this BaseFilterV4.

        :param product_count: The product_count of this BaseFilterV4.  # noqa: E501
        :type: int
        """
        self._product_count = product_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = [x.to_dict() if hasattr(x, "to_dict") else x for x in value]
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(BaseFilterV4, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseFilterV4):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
